/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package maindisplay;

import java.lang.invoke.MethodHandles;
import java.net.URL;
import java.util.ResourceBundle;
import java.util.logging.Logger;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.TextField;
import socketfx.Constants;
import socketfx.FxSocketServer;
import socketfx.SocketListener;
//import javafx.concurrent

/**
 *
 * @author hkrwa
 */
public class FXMLDocumentController implements Initializable {
    
   @FXML
   private ListView<String> testList;//
   @FXML
   private Button connectButton;
   @FXML
   private Button disconnectButton;
   @FXML
   private TextField portTextField;
   @FXML
   private CheckBox autoConnectCheckBox;
   @FXML
   private Label connectedLabel;
   
   private final static Logger LOGGER =
            Logger.getLogger(MethodHandles.lookup().lookupClass().getName());
   
   private ObservableList<String> testListData;
   
   private boolean isConnected;
   
   public enum ConnectionDisplayState {

        DISCONNECTED, WAITING, CONNECTED, AUTOCONNECTED, AUTOWAITING
    }
   private FxSocketServer socket;
   
   private void connect() {
        socket = new FxSocketServer(new FxSocketListener(),
                Integer.valueOf(portTextField.getText()),
                Constants.instance().DEBUG_NONE);
        socket.connect();
    }
   private void displayState(ConnectionDisplayState state) {
        switch (state) {
            case DISCONNECTED:
                connectButton.setDisable(false);
                disconnectButton.setDisable(true);
                //sendButton.setDisable(true);
                //sendTextField.setDisable(true);
                connectedLabel.setText("Not connected");
                break;
            case WAITING:
            case AUTOWAITING:
                connectButton.setDisable(true);
                disconnectButton.setDisable(true);
                //sendButton.setDisable(true);
               // sendTextField.setDisable(true);
                connectedLabel.setText("Waiting to connect");
                break;
            case CONNECTED:
                connectButton.setDisable(true);
                disconnectButton.setDisable(false);
                //sendButton.setDisable(false);
                //sendTextField.setDisable(false);
                connectedLabel.setText("Connected");
                break;
            case AUTOCONNECTED:
                connectButton.setDisable(true);
                disconnectButton.setDisable(true);
                //sendButton.setDisable(false);
                //sendTextField.setDisable(false);
                connectedLabel.setText("Connected");
                break;
        }
    }
   @Override
    public void initialize(URL url, ResourceBundle rb) {
        isConnected = false;
        displayState(ConnectionDisplayState.DISCONNECTED);
    }
        testListData = FXCollections.observableArrayList();
        testList.setItems(testListData);
        //testList.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
        
        //Runtime.getRuntime().addShutdownHook(new ShutDownThread());
    }
    class ShutDownThread extends Thread {

        @Override
        public void run() {
            if (socket != null) {
                if (socket.debugFlagIsSet(Constants.instance().DEBUG_STATUS)) {
                    LOGGER.info("ShutdownHook: Shutting down Server Socket");    
                }
                socket.shutdown();
            }
        }
    }
    class FxSocketListener implements SocketListener {

        @Override
        public void onMessage(String line) {
            if (line != null && !line.equals("")) {
                testListData.add(line);
            }
        }
        
        @Override
        public void onClosedStatus(boolean isClosed) {
            if (isClosed) {
                isConnected = false;
                if (autoConnectCheckBox.isSelected()) {
                    displayState(ConnectionDisplayState.AUTOWAITING);
                    connect();
                } else {
                    displayState(ConnectionDisplayState.DISCONNECTED);
                }
            } else {
                isConnected = true;
                if (autoConnectCheckBox.isSelected()) {
                    displayState(ConnectionDisplayState.AUTOCONNECTED);
                } else {
                    displayState(ConnectionDisplayState.CONNECTED);
                }
            }
        }
    }
    @FXML
    private void handleConnectButton(ActionEvent event) {
        displayState(ConnectionDisplayState.WAITING);
        connect();
    }

    @FXML
    private void handleAutoConnectCheckBox(ActionEvent event) {
        if (autoConnectCheckBox.isSelected()) {
            if (isConnected) {
                displayState(ConnectionDisplayState.AUTOCONNECTED);
            } else {
                displayState(ConnectionDisplayState.AUTOWAITING);
                connect();
            }
        } else {
            if (isConnected) {
                displayState(ConnectionDisplayState.CONNECTED);
            } else {
                displayState(ConnectionDisplayState.WAITING);
            }
        }
    }
}
 /*
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        // TODO
      simulator1 sim1 = new simulator1();
      String display1 = sim1.running(); 
      testText.setText(display1);
    }    

    @Override
    public void onClosedStatus(boolean isClosed) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
*/
